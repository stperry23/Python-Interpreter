failCount = 0
# check
if 1*1 != 1:
 print "Multiplication between two integers produced the wrong answer: 1*1 =", 1*1, ", should be 1" 
 failCount = failCount + 1
#check
if (0==0) * (0==0) != 1:
 print "Multiplication between two booleans produced the wrong answer: (0==0) * (0==0) =", (0==0) * (0==0), ", should be 1" 
 failCount = failCount + 1

if 1 * (0==0) != 1:
 print "Multiplication between an int and a bool produced the wrong answer: 1*(0==0) =", 1*(0==0), ", should be 1"
 failCount = failCount + 1

if 1/1 != 1:
 print "Division between two integers produced the wrong answer: 1/1 =", 1/1, ", should be 1" 
 failCount = failCount + 1

if (0==0) / (0==0) != 1:
 print "Division between two booleans produced the wrong answer: (0==0) / (0==0) =", (0==0) / (0==0), ", should be 1" 
 failCount = failCount + 1

if 1 / (0==0) != 1:
 print "Division between an int and a bool produced the wrong answer: 1/(0==0) =", 1/(0==0), ", should be 1"
 failCount = failCount + 1

if 1%1 != 0:
 print "Modulo between two integers produced the wrong answer: 1%1 =", 1%1, ", should be 0" 
 failCount = failCount + 1
if (0==0) % (0==0) != 0:
 print "Modulo between two booleans produced the wrong answer: (0==0) % (0==0) =", (0==0) % (0==0), ", should be 0" 
 failCount = failCount + 1
if 1 % (0==0) != 0:
 print "Modulo between an int and a bool produced the wrong answer: 1%(0==0) =", 1% (0==0), ", should be 0"
 failCount = failCount + 1

if "ab" > "b":
 print "Line 238 evaluated to", "ab" > "b", ", but should have evaluated to 0"
 failCount = failCount + 1

if "ab" >= "ba":
 print "Line 241 evaluated to", "ab" >= "ba", ", but should have evaluated to 0"
 failCount = failCount + 1

if "ab" > "ba":
 print "Line 244 evaluated to", "ab" > "ba", ", but should have evaluated to 0"
 failCount = failCount + 1

if -5 - ---3 != -2:
 print "-5 - ---3 evaluated to", -5 - ---3, ", but should have evaluated to -2. Yes this is valid in python."
 failCount = failCount + 1
if 1 == 0:
 print "If statement 1 == 0 evaluated to", 1==0, " and executed. Should be 0 and not have executed."
 failCount = failCount + 1

failCount = failCount + 1
# these comments preempt an indent token, possibly causing an error in your parsing.
if 1 == 1:
 failCount = failCount - 1
else:
 print "If statement 1 == 1 evaluated to", 1==1, " and executed its else statement. Should be 1 and not have executed else."
 # and this commend preempts a dedent token.

temp = failCount
failCount = failCount + 1
if 1 == 1:
 if 1 == 1:
  failCount = failCount - 1
if failCount != temp:
 print "Nested if statements didn't work." 
else:
    print "it worked"
for i in range(0):
 print "This for loop has a range of 0, so it should never execute its statements."
 failCount = failCount + 1

a = 0 
for i in range(3):
 a = a + 1
if a != 3:
 print "For loop on line 38 didn't execute properly"
 failCount = failCount + 1

a = 0
for i in range(1, 3):
 a = a + 1
if a != 2:
 print "For loop on line 45 didn't execute properly"
 failCount = failCount + 1

a = 0
for i in range(5, 25, 5):
 a = a + 1
if a != 4:
 print "For loop on line 52 didn't execute properly"
 failCount = failCount + 1

a = 0
for i in range(5):
    for j in range(3):
     a = a + 1

#print "Illegal dedent. Should produce an error"
if a != 15:
 print "For loop on line 59 didn't execute properly"
 failCount = failCount + 1

a = 0
b = 2
for i in range(5):
    for j in range(3):
        if b > 0:
            a = a + 1
            print a
    b = b - 1
    print b
#print "Unexpected indent. Should produce an error"
if a != 6:
 print "For loop on line 70 didn't execute properly. a should be 6, but it is,", a
 failCount = failCount + 1

a = 0
for i in range(100):
    for j in range(1):
        if a == 0:
            a = a + 1
if a != 1:
 print "For loop on line 81 didn't execute properly. a should be 1, but it is,", a
 failCount = failCount + 1
print failCount





